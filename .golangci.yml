## This file should only be updated in the tech-guide (https://github.com/PaddleHQ/tech-guide/) repo.
## Changes will automatically generate a PR in the docker-images repo

## This file should only be updated in the tech-guide (https://github.com/PaddleHQ/tech-guide/) repo.
## Changes will automatically generate a PR in the docker-images repo
run:
  tests: true
issues:
  exclude-use-default: false
  exclude-generated: "strict"
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-rules:
    - path: _test\.go
      linters:
        - bodyclose
        - containedctx
        - cyclop
        - dogsled
        - copyloopvar
        - exhaustive
        - forcetypeassert
        - funlen
        - err113
        - gocognit
        - goconst
        - gocyclo
        - gosec
        - lll
        - nestif
    - path: _test\.go
      linters:
        - nilnil
        - wrapcheck
# Override the defaults for each linter specified.
linters-settings:
  gocritic:
    # https://golangci-lint.run/usage/linters/#gocritic
    enabled-tags:
      - diagnostic
      - opinionated
      - performance
      - style
    disabled-checks:
      # causes a crash with some libraries
      - hugeParam
      # causes a crash with some libraries
      - paramTypeCombine
  exhaustive:
    default-signifies-exhaustive: true
  lll:
    line-length: 140
  # misspell is not enabled by default, but can be for specific projects with --enable "misspell"
  misspell:
    locale: US
    ignore-words:
      - localised
      - catalogue
      - authorised
  godot:
    exclude:
      - "@(Given|When|Then|And|But) (.*)" # go-relish uses comments to auto-generate code, these lines should not end with a `.`
  gci:
    custom-order: true
    sections:
      - standard
      - localmodule
      - prefix(github.com/PaddleHQ)
      - default
  spancheck:
    checks:
      - end
      - record-error
      - set-status
  sloglint:
    context: all
    static-msg: true
    key-naming-case: kebab
  testifylint:
    disable:
      - require-error
  gosec:
    excludes:
      - G115 # Potential integer overflow when converting between integer types
  gofmt:
    simplify: true
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
      - pattern: 'a[b:len(a)]'
        replacement: 'a[b:]'
  wrapcheck:
    ignorePackageGlobs:
      - github.com/PaddleHQ/*
linters:
  enable:
    # Checks for unclosed HTTP response body: https://github.com/timakin/bodyclose
    - bodyclose
    # Checks for struct contained context.Context field: https://github.com/sivchari/containedctx
    - containedctx
    # Checks function and package cyclomatic complexity: https://github.com/bkielbasa/cyclop
    - cyclop
    # Checks for assignments with too many blank identifiers (e.g. x, , , _, := f()): https://github.com/alexkohler/dogsled
    - dogsled
    # Checks for two durations multiplied together: https://github.com/charithe/durationcheck
    - durationcheck
    # Checks for unchecked errors: https://github.com/kisielk/errcheck
    - errcheck
    # Copyloopvar is a linter detects places where loop variables are copied.
    - copyloopvar
    # Checks that sentinel errors are prefixed with the `Err` and error types are suffixed with the `Error`: https://github.com/Antonboom/errname
    - errname
    # Check exhaustiveness of enum switch statements: https://github.com/nishanths/exhaustive
    - exhaustive
    # Checks for forced type assertions: https://github.com/gostaticanalysis/forcetypeassert
    - forcetypeassert
    # Checks for long functions: https://github.com/ultraware/funlen
    - funlen
    # Forbids identifiers: https://github.com/ashanbrown/forbidigo
    - forbidigo
    # Check the errors handling expressions: https://github.com/Djarvur/go-err113
    - err113
    # Checks the cognitive complexity of functions: https://github.com/uudashr/gocognit
    - gocognit
    # Checks for repeated strings that could be replaced by a constant: https://github.com/jgautheron/goconst
    - goconst
    # Checks for bugs, performance and style issues: https://github.com/go-critic/go-critic
    - gocritic
    # Checks the cyclomatic complexity of functions: https://github.com/fzipp/gocyclo
    - gocyclo
    # Checks if comments end in a period: https://github.com/tetafro/godot
    - godot
    # Gofmt checks whether code was gofmt-ed.
    - gofmt
    # Checks whether code was gofumpt-ed: https://github.com/mvdan/gofumpt
    - gofumpt
    # Checks for security problems: https://github.com/securego/gosec
    - gosec
    # Checks if code could be simplified: https://github.com/dominikh/go-tools/tree/master/simple
    - gosimple
    # Checks for suspicious constructs, such as Printf calls whose arguments do not align with the format string: https://golang.org/cmd/vet/
    - govet
    # Checks for import ordering
    - gci
    # Checks for assignments to existing variables are unused: https://github.com/gordonklaus/ineffassign
    - ineffassign
    # Checks for long lines: https://golangci-lint.run/usage/linters/#lll
    - lll
    # Checks for slice declarations with non-zero initial length: https://github.com/ashanbrown/makezero
    - makezero
    # Checks for incorrect spellings: https://github.com/client9/misspell:
    - misspell
    # Checks for code that returns nil even if it checks that the error is not nil: https://github.com/gostaticanalysis/nilerr
    - nilerr
    # Checks for deeply nested if statements: https://github.com/nakabonne/nestif
    - nestif
    # Checks for sending http request without context.Context: https://github.com/sonatard/noctx
    - noctx
    # Checks for slice declarations that could potentially be pre-allocated: https://github.com/alexkohler/prealloc
    - prealloc
    # Checks for code that shadows one of Go's predeclared identifiers: https://github.com/nishanths/predeclared
    - predeclared
    # Fast, configurable, extensible, flexible, and beautiful linter for Go: https://github.com/mgechev/revive
    - revive
    # Checks for whether Err of rows is checked successfully: https://github.com/jingyugao/rowserrcheck
    - rowserrcheck
    # Checks for mistakes with OpenTelemetry/Census spans.
    - spancheck
    # Ensure consistent code style when using log/slog.
    - sloglint
    # https://staticcheck.io/
    - staticcheck
    # a replacement for golint: https://github.com/dominikh/go-tools/tree/master/stylecheck
    - stylecheck
    # Checks that sql.Rows and sql.Stmt are closed: https://github.com/ryanrolds/sqlclosecheck
    - sqlclosecheck
    # Detects using os.Setenv instead of t.Setenv
    - tenv
    # Checks usage of github.com/stretchr/testify.
    - testifylint
    # linter that makes you use a separate _test package: https://github.com/maratori/testpackage
    - testpackage
    # Detects when some calls can be replaced by methods from the testing package.
    - usetesting
    # Checks for unnecessary type conversions: https://github.com/mdempsky/unconvert
    - unconvert
    # Checks for unused function parameters: https://github.com/mvdan/unparam
    - unparam
    # Checks for unused constants, variables, functions and types: https://github.com/dominikh/go-tools/tree/master/unused
    - unused
    # Checks for wasted assignment statements: https://github.com/sanposhiho/wastedassign
    - wastedassign
    # Checks for detection of leading and trailing whitespace: https://github.com/ultraware/whitespace
    - whitespace
    # Checks for no simultaneous return of nil error and an invalid value: https://github.com/Antonboom/nilnil
    - nilnil
    # Checks that errors returned from external packages are wrapped: https://github.com/tomarrell/wrapcheck
    - wrapcheck
